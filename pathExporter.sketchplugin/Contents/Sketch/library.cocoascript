String.prototype.repeat = function( num ) {
  return new Array( num + 1 ).join( this );
}
String.prototype.replaceAll = function(search, replace){
  if(!search || !replace){return this;}
  return this.replace(new RegExp('[' + search + ']', 'g'), replace);
};

var Lib = {
  alert: function(message) {
    var app = [NSApplication sharedApplication];

    [app displayDialog:message];
  },
  
  isArray: function(anything) {
    if( Object.prototype.toString.call( anything ) === '[object Array]' ) {
      return true
    }
    return false
  },
  //rectangle, circle, vector, etc
  isShape: function(item) {return [item isMemberOfClass:[MSShapeGroup class]]; },

  //normal sketch group
  isGroup: function(item) {return [item isMemberOfClass:[MSLayerGroup class]]; },

  isArtboard: function(item) {return [item isMemberOfClass:[MSArtboardGroup class]] || [item isMemberOfClass:[MSLayerGroup class]]; },

  paste: function(value) {
    var pasteBoard = [NSPasteboard generalPasteboard];
    [pasteBoard declareTypes:[NSArray arrayWithObject:NSStringPboardType] owner:nil];
    [pasteBoard setString:value forType: NSStringPboardType];
  },
  
  save: function(name, value) {
    var panel = [NSSavePanel savePanel];
    
    [panel setMessage:"Where do you want to place the class?"];
    [panel setRequiredFileType: "swift"];
    [panel setCanCreateDirectories: true];
    if (name != null) {
	  [panel setNameFieldStringValue: name];
	}
	
    if ([panel runModal] == NSOKButton) {
      var filePath = [panel filename];
      var stringValue = [NSString stringWithFormat: @"%@", value];
      
      [stringValue writeToFile: filePath atomically: true encoding: NSUTF8StringEncoding error: null];
    }
  },
  
  toFixed: function(number, precision) {
    var power = Math.pow(10, precision || 0);
    return String(Math.round(number * power)/power);
  }
}

var Swift = {
  safeName: function(name) { return name.replaceAll(" ", "_") },

  wrapInFrameMethod: function(array, methodName) {
    return ["\tfunc " + methodName + "(bounds: CGRect) -> CGPath {", array, "\t}\n"]
  },

  wrapInFrameMethodNoReturn: function(array, methodName) {
    return ["\tfunc " + methodName + "(bounds: CGRect) {", array, "\t}"]
  },

  wrapInLazyVariable: function(name, array, type) {
    if(type == null) type = "CAShapeLayer"
    return ["\tlazy var "+name+": " + type + " = {", array, "\t}()"]
  },

  _flattenArray: function(acc, value, index) {
    if(Lib.isArray(value)) {
      for(var i=0; i<value.length; i++) {
        Swift._flattenArray(acc, value[i], index + 1)
      }
    } else {
      acc.push("\t\t".repeat(index) + value)
    }
  },

  flattenArray: function(array) {
    var flatArray = [];
    Swift._flattenArray(flatArray, array, -1)
    return flatArray.join("\n");
  }
}