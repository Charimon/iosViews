@import "library.cocoascript";

var onRun = function(context) {
  if (context.selection == null || context.selection.count() == 0) {
    Lib.alert("Select an object to export its data to the clipboard!");
    return;
  }
  
  var loop = context.selection.objectEnumerator();
  
  while(item = loop.nextObject() ){
    Lib.paste(Swift.flattenArray(processSelected(item)).toString());
  }
};

var onSave = function(context) {
  if (context.selection == null || context.selection.count() == 0) {
    Lib.alert("Select an object to save the class on disk!");
    return;
  }
  
  var loop = context.selection.objectEnumerator();

  while(item = loop.nextObject() ){
    var artboard = Lib.isArtboard(item) ? item : item.parentArtboard();
    var boardName = Swift.safeName(artboard.name());
    
    Lib.save(boardName + "View", Swift.flattenArray(processSelected(item)).toString())
  }
};

var processSelected = function(selected) {
  var artboard = Lib.isArtboard(selected) ? selected : selected.parentArtboard();
  var artBoardLines	= processArtboard(artboard);
  var boardName = Swift.safeName(artboard.name());
  var classLines = ["import UIKit\n","@IBDesignable\n","class " + boardName + "View : UIView {"];
  
  classLines = classLines.concat(artBoardLines);
  classLines.push("\n\toverride func layoutSubviews() {");
  classLines.push("\t\tdo"+ boardName + "Layout(self.bounds)");
  classLines.push("\t\tsuper.layoutSubviews()");
  classLines.push("\t}");
  classLines.push("}\n");
  
  return classLines;
}

var processArtboard = function(artboard) {
  if(!Lib.isArtboard(artboard)) return [];

  var layers = []
  var swiftCode = processGroup(artboard, artboard.frame(), Swift.safeName(artboard.name()), layers)

  var nameCode = []
  for(var i=0; i< layers.length; i++) {
    var name = Swift.safeName(layers[i].name())    
    var fill = getFill(layers[i])

    var namePath = name + "_path"
    nameCode.push(name + ".frame = bounds")
    nameCode.push(name + ".path = " + namePath + "("+ name +".frame)")

    if(fill != null && fill.fillType() == 1 && fill.gradient().gradientType() == 0) {
      nameCode.push(name + "_gradient.frame = bounds")
      nameCode.push("(" + name + "_gradient.mask as? CAShapeLayer)?.path = " + namePath + "(" + name + ".frame)")
    }

  }

  swiftCode = swiftCode.concat(Swift.wrapInFrameMethodNoReturn(nameCode, "do" + Swift.safeName(artboard.name()) + "Layout"))

  return swiftCode
}

//consider an artboard to be a group
var processGroup = function(group, artboardFrame, artboardName, layersObjects) {
  if(!(Lib.isGroup(group) || Lib.isArtboard(group))) return [];

  var swiftCode = []
  var layers = group.layers();

  if(artboardFrame == null) artboardFrame = group.frame()
  if(artboardName == null) {
    artboardName = Swift.safeName(group.name())
  }

  for(var i = 0; i < layers.count(); i++){
    var thing = [layers objectAtIndex:i]
    if(!thing.isVisible()) continue;

    if(Lib.isGroup(thing)) {
      var groupLayers = [];
      
      swiftCode.push("\t// Group " + Swift.safeName(thing.name()))
      swiftCode = swiftCode.concat(processGroup(thing, artboardFrame, artboardName, groupLayers) )
      layersObjects = layersObjects.concat(groupLayers)
    } else if(Lib.isShape(thing)) {
      swiftCode = swiftCode.concat(processShape(thing, artboardFrame, artboardName) )
      layersObjects.push(thing)
    }
  }
  return swiftCode
}

var processShape = function(thing, artboardFrame) {
  var swiftCode = []

  var shapeName = Swift.safeName(thing.name())
  var shapePathName = shapeName+"_path"

  var fill = getFill(thing)

  var layerArray = ["let l = CAShapeLayer()"]
  layerArray = layerArray.concat(extractStroke(thing.style()))
  if(fill != null) {
    if(fill.fillType() == 0) layerArray = layerArray.concat(extractFill(fill))
  } else {
    layerArray.push("l.fillColor = nil")
  }
  layerArray = layerArray.concat(["self.layer.addSublayer(l)", "return l"])
  
  swiftCode.push("\t// " + shapeName + " shape")
  swiftCode = swiftCode.concat(Swift.wrapInLazyVariable(shapeName, layerArray))

  if(fill != null) {
    if (fill.fillType() == 1) {
	  extractFill(fill)
	  layerArray = ["let l = CAGradientLayer()"]
	  layerArray = layerArray.concat(extractFill(fill))
	  layerArray = layerArray.concat(["l.mask = CAShapeLayer()",
	                                "self." + shapeName + ".addSublayer(l)",
	                                "return l"])
	  swiftCode = swiftCode.concat(Swift.wrapInLazyVariable(shapeName + "_gradient", layerArray, CAGradientLayer))
	} else if (fill.fillType() > 1) {
	  log("Unsupported fill type: " + fill.fillType());
	}
  }

  swiftCode = swiftCode.concat(Swift.wrapInFrameMethod(processShapePath(thing, artboardFrame), shapePathName ) )

  return swiftCode
}

var getFill = function(thing) {
  var style = thing.style();
  var fills = style.fills().array()

  for(var i = fills.count() - 1; i >= 0; i--) {
    if(fills[i].isEnabled() && [0, 1].indexOf(fills[i].fillType()) >= 0 ) {
      return fills[i]
    }
  }

  return null;
}

//MSStyleFill
var extractFill = function(styleFill) {
  if(styleFill == null) return ["l.fillColor = nil"];

  var color = styleFill.color();
  var fillType = styleFill.fillType();
  if(fillType == 0) {
    return ["l.fillColor = UIColor(hue: " + Lib.toFixed(color.hue(), 2) +", saturation: " + Lib.toFixed(color.saturation(), 2) + ", brightness: " + Lib.toFixed(color.brightness(), 2) + ", alpha: " + Lib.toFixed(color.alpha(), 2) + ").CGColor"]
  } else if(fillType == 1 && styleFill.gradient().gradientType() == 0) {
    var gradientStops = styleFill.gradient().stops()
    var colorsArr = []
    var locationsArr = []
    for(var i=0; i< gradientStops.count(); i ++) {
      var stop = gradientStops.objectAtIndex(i)
      var color = stop.color()
      locationsArr.push("NSNumber(float: " + Lib.toFixed(stop.position(), 2) + ")")
      colorsArr.push("UIColor(hue: " + Lib.toFixed(color.hue(), 2) +", saturation: " + Lib.toFixed(color.saturation(), 2) + ", brightness: " + Lib.toFixed(color.brightness(), 2) + ", alpha: " + Lib.toFixed(color.alpha(), 2) + ").CGColor")
    }

    var from = styleFill.gradient().from()
    var to = styleFill.gradient().to()

    return ["l.colors = ["+colorsArr.toString()+"]",
            "l.locations = ["+locationsArr.toString()+"]",
            "l.startPoint = CGPointMake(" + Lib.toFixed(from.x, 2) + ", " + Lib.toFixed(from.y, 2) + ")",
            "l.endPoint = CGPointMake(" + Lib.toFixed(to.x, 2) + ", " + Lib.toFixed(to.y, 2) + ")"]
  } else if(fillType == 1) {
    log("Unsupported gradient type: " + styleFill.gradient().gradientType());
  }
  return ["l.fillColor = nil"]
}

var extractStroke = function(style) {
  var array = []

  var borders = style.borders().array()

  if (borders != null && borders.count() > 0) {
    var borderOptions = style.borderOptions()
    var lineJoin = borderOptions.lineJoinStyle();
    var lineCap = borderOptions.lineCapStyle();
    var dashPattern = borderOptions.dashPattern().componentsJoinedByString(",")
    
    for(var i = borders.count() - 1; i >= 0; i--) {
      if(borders[i].isEnabled() && borders[i].position() == 0) {
        var color = borders[i].color();
        array.push("l.lineWidth = " + borders[i].thickness())
        array.push("l.lineDashPattern = [" + dashPattern + "]")
        array.push("l.lineJoin = " + ["kCALineJoinMiter", "kCALineJoinRound", "kCALineJoinBevel"][lineJoin])
        array.push("l.lineCap = " + ["kCALineCapButt", "kCALineCapRound", "kCALineCapSquare"][lineCap])
        array.push("l.strokeColor = UIColor(hue: " + Lib.toFixed(color.hue(), 2) +", saturation: " + Lib.toFixed(color.saturation(), 2) + ", brightness: " + Lib.toFixed(color.brightness(), 2) + ", alpha: " + Lib.toFixed(color.alpha(), 2) + ").CGColor")
      }
    }
  } else {
    array.push("l.strokeColor = nil")
  }
  return array
}

var processShapePath = function(anything, boundsRect) {
  if(!Lib.isShape(anything)) { return null; }

  var swiftCode = ["let path = UIBezierPath()", "let wdtRatio = bounds.width/" + boundsRect.width(), "let hgtRatio = bounds.height/" + boundsRect.height()]
  
  for (var j = 0; j < anything.layers().count(); j++) {
    var layer = anything.layers().objectAtIndex(j)

    var path = layer.path()
    var pointsCount = path.numberOfPoints()

    for(var i = 0; i < pointsCount; i++) { addPoint(swiftCode, layer, path, i, i == 0); }
    if(path.isClosed()) {
      addPoint(swiftCode, layer, path, 0, false);
      swiftCode.push("path.closePath()");
    }
  }
  swiftCode.push("return path.CGPath");

  return swiftCode
}

var addPoint = function(acc, layer, path, index, isFirst) {
  var offsetX = CGRectGetMinX(layer.frameInArtboard())
  var offsetY = CGRectGetMinY(layer.frameInArtboard())

  var pathPoint = path.pointAtIndex(index);
  var abs_point = layer.absolutePoint(pathPoint.point())

  var abs_pointTo = null
  if(pathPoint.hasCurveTo()) { abs_pointTo = layer.absolutePoint(pathPoint.curveTo()); }

  var prev_abs_pointFrom = null
  if(index >= 0 && !isFirst) {
    var prevPoint = path.pointAtIndex( (index-1 + path.numberOfPoints()) % path.numberOfPoints() );
    if(prevPoint.hasCurveFrom()) { prev_abs_pointFrom = layer.absolutePoint(prevPoint.curveFrom()); }
  }

  if(index == 0 && isFirst) { acc.push("path.moveToPoint("+relPointOffset(abs_point, offsetX, offsetY)+")") }
  else if(prev_abs_pointFrom && abs_pointTo) {
    acc.push("path.addCurveToPoint("+relPointOffset(abs_point, offsetX, offsetY)+", controlPoint1: "+relPointOffset(prev_abs_pointFrom, offsetX, offsetY)+", controlPoint2:"+relPointOffset(abs_pointTo, offsetX, offsetY)+")")
  } else if(prev_abs_pointFrom || abs_pointTo) {
    var controlPoint = prev_abs_pointFrom || abs_pointTo
    acc.push("path.addQuadCurveToPoint("+relPointOffset(abs_point, offsetX, offsetY)+", controlPoint: "+relPointOffset(controlPoint, offsetX, offsetY)+")")
  } 
  else {
    acc.push("path.addLineToPoint("+relPointOffset(abs_point, offsetX, offsetY)+")")
  }
}

var relPointOffset = function(point, offsetX, offsetY) {
  var x = Lib.toFixed(parseFloat(point.x) + parseFloat(offsetX), 2 )
  var y = Lib.toFixed(parseFloat(point.y) + parseFloat(offsetY), 2 )
  var widthString = "*wdtRatio"
  var heightString = "*hgtRatio")
  return "CGPoint(x: " + x + widthString + " , y: " + y + heightString + ")"
}

var relRect = function(rect, frame) {
  var x = rect.x()
  var y = rect.y()
  var width = rect.width()
  var height = rect.height()
  var frame_width = frame.width()
  var frame_height = frame.height()
  
  return "CGRect(x: " + Lib.toFixed(x, 2) +  " * bounds.width/"+Lib.toFixed(frame_width, 2) +
              ", y: " + Lib.toFixed(y, 2) + " * bounds.height/"+Lib.toFixed(frame_height, 2) +
              ", width: " + Lib.toFixed(width, 2) + " * bounds.width/"+Lib.toFixed(frame_width, 2) +
              ", height: " + Lib.toFixed(height, 2) + " * bounds.height/"+Lib.toFixed(frame_height, 2)+")"
}
